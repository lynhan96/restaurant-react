{
  "rules": {
    // generally user cannot read or write anywhere
    // unless permission is explicitly given in each ref
    ".read": "false",
    ".write": "false",

    "users": {
      // admin can read/write to all users
      ".read": "root.child('admins').hasChild(auth.uid)",
      ".write": "root.child('admins').hasChild(auth.uid)",

      "$userID": {
        // User can only read/write to their own ref
        ".read": "auth.uid === $userID",
        ".write": "auth.uid === $userID",
        ".validate": "newData.child('id').exists() && newData.child('name').exists() && newData.child('title').exists() && newData.child('email').exists() && newData.child('company').exists() && newData.child('position').exists() && newData.child('country').exists() && newData.child('yearXP').exists() && data.exists() ? !newData.child('createdAt').exists() : newData.child('createdAt').exists()",

        "id":        { ".validate": "newData.isString() && newData.val() === $userID" },
        "name":      { ".validate": "newData.isString()" },
        "title":     { ".validate": "newData.isString()" },
        "email":     { ".validate": "newData.isString()" },
        "company":   { ".validate": "newData.isString()" },
        "position":  { ".validate": "newData.isString()" },
        "country":   { ".validate": "newData.isString()" },
        "yearXP":    { ".validate": "newData.isNumber()" },
        "createdAt": { ".validate": "newData.val() === now" },

        // no other fields can be included
        "$other": { ".validate": false }
      }
    },

    "admins": {
      // User can read/write if user is one of the admins
      ".read": "root.child('admins').hasChild(auth.uid)",
      ".write": "root.child('admins').hasChild(auth.uid)",

      "$userID": { ".validate": "newData.isBoolean()" }
    },

    "sets": {
      // Users can read all sets
      ".read": "auth !== null",
      // Only admin can write to all sets
      ".write": "root.child('admins').hasChild(auth.uid)",
      ".indexOn": ["published"],

      "$setID": {
        ".validate": "newData.child('id').exists() && newData.child('category').exists() && newData.child('title').exists() && newData.child('overview').exists() && newData.child('published').exists() && newData.child('ordering').exists()",

        "id": { ".validate": "newData.isString() && newData.val() === $setID" },
        "category": { ".validate": "newData.val() === 'General' || newData.val() === 'Industry' || newData.val() == 'Specialisation'" },
        "title": { ".validate": "newData.isString()" },
        "overview": { ".validate": "newData.isString()" },
        "published": { ".validate": "newData.isBoolean()" },
        "ordering": { ".validate": "newData.isNumber()" },

        // no other fields can be included
        "$other": { ".validate": false }
      }
    },

    "questions": {
      // Admin can read/write to all questions
      ".read": "root.child('admins').hasChild(auth.uid)",
      ".write": "root.child('admins').hasChild(auth.uid)",

      "$setID": {
        // Users can read only
        ".read": "auth !== null",
        ".write": false,

        "$questionID": {
          ".validate": "newData.child('id').exists() && newData.child('title').exists() && newData.child('definition').exists() && newData.child('ordering').exists() && newData.child('responses').exists()",

          "id": { ".validate": "newData.isString() && newData.val() === $questionID" },
          "title": { ".validate": "newData.isString()" },
          "definition": { ".validate": "newData.isString()" },
          "ordering": { ".validate": "newData.isNumber()" },
          "responses": {
            "$responseID": {
              ".validate": "newData.child('title').exists() && newData.child('weightage').exists()",

              "id": { ".validate": "newData.isString() && newData.val() === $responseID" },
              "title": { ".validate": "newData.isString()" },
              "weightage": { ".validate": "newData.isNumber() && newData.val() <= 100" }
            }
          },

          // no other fields can be included
          "$other": { ".validate": false }
        }
      }
    },

    "results": {
      // Admin can read only to all results
      ".read": "root.child('admins').hasChild(auth.uid)",
      ".write": false,

      "$userID": {
        // User can only read/write to their own ref
        ".read": "auth.uid === $userID",
        ".write": "auth.uid === $userID",

        "$setID": {
          // $setID must exists
          ".validate": "root.child('sets').hasChild($setID)",

          // $questionID stores $responseID of a $questionID in a $setID
          // Checks that the given $responseID exists which also ensures $questionID exists
          "$questionID": { ".validate": "newData.exists() && root.child('/questions/'+$setID+'/'+$questionID+'/responses').hasChild(newData.val())" }
        }
      }
    },

    "pages": {
      // Everyone can read
      // Only admin can write
      ".read": "true",
      ".write": "root.child('admins').hasChild(auth.uid)",

      // Note that pages are fixed to Home, About, Benefits and Qualification
      "$pageTitle": {
        "title": { ".validate": "newData.isString()" },
        "content": { ".validate": "newData.isString()" }
      }
    }
  }
}
